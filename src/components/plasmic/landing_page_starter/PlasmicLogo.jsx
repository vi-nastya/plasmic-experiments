// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vVjGbvUwkV23CBGoevYCby
// Component: gynvKYUN6Bos
import * as React from "react"
import { Link } from "gatsby"
import * as p from "@plasmicapp/react-web"
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web"
import "@plasmicapp/react-web/lib/plasmic.css"
import * as projectcss from "./plasmic_landing_page_starter.module.css" // plasmic-import: vVjGbvUwkV23CBGoevYCby/projectcss
import * as sty from "./PlasmicLogo.module.css" // plasmic-import: gynvKYUN6Bos/css
import logoT0CkNyUuNbc from "./images/logo.svg" // plasmic-import: -T0CkNyUUNbc/picture

export const PlasmicLogo__VariantProps = new Array("_50Opaque")

export const PlasmicLogo__ArgProps = new Array()

function PlasmicLogo__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props
  return (
    <p.PlasmicLink
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.a, projectcss.root_reset, sty.root, {
        [sty.root___50Opaque]: hasVariant(variants, "_50Opaque", "_50Opaque"),
      })}
      component={Link}
      href={"/"}
      platform={"gatsby"}
    >
      <p.PlasmicImg
        data-plasmic-name={"img"}
        data-plasmic-override={overrides.img}
        alt={""}
        className={classNames(sty.img, {
          [sty.img___50Opaque]: hasVariant(variants, "_50Opaque", "_50Opaque"),
        })}
        displayHeight={"40px"}
        displayMaxHeight={"none"}
        displayMaxWidth={"none"}
        displayMinHeight={"0"}
        displayMinWidth={"0"}
        displayWidth={"40px"}
        src={{
          src: logoT0CkNyUuNbc,
          fullWidth: 150,
          fullHeight: 150,
          aspectRatio: 1,
        }}
      />
    </p.PlasmicLink>
  )
}

const PlasmicDescendants = {
  root: ["root", "img"],
  img: ["img"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicLogo__ArgProps,
      internalVariantPropNames: PlasmicLogo__VariantProps,
    })

    const { dataFetches } = props
    return PlasmicLogo__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicLogo"
  } else {
    func.displayName = `PlasmicLogo.${nodeName}`
  }
  return func
}

export const PlasmicLogo = Object.assign(
  // Top-level PlasmicLogo renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicLogo
    internalVariantProps: PlasmicLogo__VariantProps,
    internalArgProps: PlasmicLogo__ArgProps,
  }
)

export default PlasmicLogo
/* prettier-ignore-end */
