// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vVjGbvUwkV23CBGoevYCby
// Component: c9pUILtM0gU0
import * as React from "react"
import * as p from "@plasmicapp/react-web"
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web"
import Divider from "../../Divider" // plasmic-import: PowlnT_eP0kA/component
import ValueProp from "../../ValueProp" // plasmic-import: WnnJehOBwlFt/component
import Button from "../../Button" // plasmic-import: 8MU0F2Dvq-uK/component
import "@plasmicapp/react-web/lib/plasmic.css"
import * as projectcss from "./plasmic_landing_page_starter.module.css" // plasmic-import: vVjGbvUwkV23CBGoevYCby/projectcss
import * as sty from "./PlasmicPriceCard.module.css" // plasmic-import: c9pUILtM0gU0/css
import CheckIcon from "./icons/PlasmicIcon__Check" // plasmic-import: 6lFrGENc0UYZ/icon

export const PlasmicPriceCard__VariantProps = new Array("primary", "borders")

export const PlasmicPriceCard__ArgProps = new Array(
  "label",
  "dollars",
  "description",
  "action"
)

function PlasmicPriceCard__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root, {
        [sty.root__borders_flatLeft]: hasVariant(
          variants,
          "borders",
          "flatLeft"
        ),

        [sty.root__borders_flatRight]: hasVariant(
          variants,
          "borders",
          "flatRight"
        ),

        [sty.root__primary]: hasVariant(variants, "primary", "primary"),
      })}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__la1WN)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__xpasx)}>
          <div className={classNames(projectcss.all, sty.freeBox___48F4X)}>
            {p.renderPlasmicSlot({
              defaultContents: "Starter",
              value: args.label,
              className: classNames(sty.slotTargetLabel),
            })}
          </div>
        </div>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__zOuIy)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__yuKps)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__snp5W
              )}
            >
              {"$"}
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__za6Mk)}>
              {p.renderPlasmicSlot({
                defaultContents: "8",
                value: args.dollars,
                className: classNames(sty.slotTargetDollars),
              })}
            </div>
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__quTny
            )}
          >
            {"/month"}
          </div>
        </p.Stack>
      </p.Stack>

      <Divider
        data-plasmic-name={"divider"}
        data-plasmic-override={overrides.divider}
        className={classNames("__wab_instance", sty.divider)}
      />

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__vgauP)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__oYmBx)}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <React.Fragment>
                <ValueProp
                  className={classNames("__wab_instance", sty.valueProp__eIwA)}
                  description={
                    "Vestibulum mollis odio dictum ultrices facilisis molestie vestibulum"
                  }
                  icon={
                    <CheckIcon
                      className={classNames(projectcss.all, sty.svg__iyRds)}
                      role={"img"}
                    />
                  }
                />

                <ValueProp
                  className={classNames("__wab_instance", sty.valueProp__xUoVv)}
                  description={"Mus consequat a justo"}
                  icon={
                    <CheckIcon
                      className={classNames(projectcss.all, sty.svg__pwWfb)}
                      role={"img"}
                    />
                  }
                />
              </React.Fragment>
            ),

            value: args.description,
          })}
        </p.Stack>

        <Button
          data-plasmic-name={"button"}
          data-plasmic-override={overrides.button}
          color={hasVariant(variants, "primary", "primary") ? "green" : "white"}
          extraSmallShadow={"extraSmallShadow"}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__t05HS
                )}
              >
                {"Buy starter"}
              </div>
            ),

            value: args.action,
          })}
        </Button>
      </p.Stack>
    </div>
  )
}

const PlasmicDescendants = {
  root: ["root", "divider", "button"],
  divider: ["divider"],
  button: ["button"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPriceCard__ArgProps,
      internalVariantPropNames: PlasmicPriceCard__VariantProps,
    })

    const { dataFetches } = props
    return PlasmicPriceCard__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicPriceCard"
  } else {
    func.displayName = `PlasmicPriceCard.${nodeName}`
  }
  return func
}

export const PlasmicPriceCard = Object.assign(
  // Top-level PlasmicPriceCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    divider: makeNodeComponent("divider"),
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicPriceCard
    internalVariantProps: PlasmicPriceCard__VariantProps,
    internalArgProps: PlasmicPriceCard__ArgProps,
  }
)

export default PlasmicPriceCard
/* prettier-ignore-end */
