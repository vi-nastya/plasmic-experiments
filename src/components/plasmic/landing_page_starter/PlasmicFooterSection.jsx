// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vVjGbvUwkV23CBGoevYCby
// Component: yL3XJGMsYTXL
import * as React from "react"
import * as p from "@plasmicapp/react-web"
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web"
import Logo from "../../Logo" // plasmic-import: gynvKYUN6Bos/component
import Button from "../../Button" // plasmic-import: 8MU0F2Dvq-uK/component
import { useScreenVariants as useScreenVariantsic2XLkMdNdbp } from "./PlasmicGlobalVariant__Screen" // plasmic-import: Ic2XLkMDNdbp/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css"
import * as projectcss from "./plasmic_landing_page_starter.module.css" // plasmic-import: vVjGbvUwkV23CBGoevYCby/projectcss
import * as sty from "./PlasmicFooterSection.module.css" // plasmic-import: yL3XJGMsYTXL/css
import TwitterIcon from "./icons/PlasmicIcon__Twitter" // plasmic-import: UiaCzYy-HcED/icon
import GithubIcon from "./icons/PlasmicIcon__Github" // plasmic-import: ddQT5PxYmaNI/icon
import LinkedinIcon from "./icons/PlasmicIcon__Linkedin" // plasmic-import: DMCv3U011oTM/icon

export const PlasmicFooterSection__VariantProps = new Array()

export const PlasmicFooterSection__ArgProps = new Array()

function PlasmicFooterSection__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsic2XLkMdNdbp(),
  })

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__btp06)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___32ZSd)}
        >
          <Logo
            data-plasmic-name={"logo"}
            data-plasmic-override={overrides.logo}
            _50Opaque={"_50Opaque"}
          />

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__pzPiB)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__tcnIg
              )}
            >
              {"Connect with us"}
            </div>

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__yd2AC)}
            >
              <TwitterIcon
                className={classNames(projectcss.all, sty.svg___567FI)}
                role={"img"}
              />

              <GithubIcon
                className={classNames(projectcss.all, sty.svg__rJx4K)}
                role={"img"}
              />

              <LinkedinIcon
                className={classNames(projectcss.all, sty.svg__tyRqn)}
                role={"img"}
              />
            </p.Stack>
          </p.Stack>
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__fHzhv)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__qnMRq
            )}
          >
            {"Product"}
          </div>

          <Button
            className={classNames("__wab_instance", sty.button__sEpXk)}
            color={"navLink"}
            flat={"flat"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__eYg5
              )}
            >
              {"Pricing"}
            </div>
          </Button>

          <Button
            className={classNames("__wab_instance", sty.button__l06Pw)}
            color={"navLink"}
            flat={"flat"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__hn4Kg
              )}
            >
              {"Log in"}
            </div>
          </Button>

          <Button
            className={classNames("__wab_instance", sty.button___9Y0Mp)}
            color={"navLink"}
            flat={"flat"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___7NHwY
              )}
            >
              {"Integrations"}
            </div>
          </Button>

          <Button
            className={classNames("__wab_instance", sty.button__vL2Ha)}
            color={"navLink"}
            flat={"flat"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___8Z5Fh
              )}
            >
              {"Insights"}
            </div>
          </Button>
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__yv27J)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__gpTee
            )}
          >
            {"Support"}
          </div>

          <Button
            className={classNames("__wab_instance", sty.button__jE2Fc)}
            color={"navLink"}
            flat={"flat"}
          >
            {"Documentation"}
          </Button>

          <Button
            className={classNames("__wab_instance", sty.button__xXBzM)}
            color={"navLink"}
            flat={"flat"}
          >
            {"FAQs"}
          </Button>

          <Button
            className={classNames("__wab_instance", sty.button__e4Ko3)}
            color={"navLink"}
            flat={"flat"}
          >
            {"Status"}
          </Button>
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__h3Wmt)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__idj1
            )}
          >
            {"Company"}
          </div>

          <Button
            className={classNames("__wab_instance", sty.button__byHv3)}
            color={"navLink"}
            flat={"flat"}
          >
            {"About"}
          </Button>

          <Button
            className={classNames("__wab_instance", sty.button__zK6Jp)}
            color={"navLink"}
            flat={"flat"}
          >
            {"Contact us"}
          </Button>

          <Button
            className={classNames("__wab_instance", sty.button__rnU3)}
            color={"navLink"}
            flat={"flat"}
          >
            {"Careers"}
          </Button>

          <Button
            className={classNames("__wab_instance", sty.button__cSXg)}
            color={"navLink"}
            flat={"flat"}
          >
            {"Media"}
          </Button>
        </p.Stack>
      </p.Stack>
    </div>
  )
}

const PlasmicDescendants = {
  root: ["root", "logo"],
  logo: ["logo"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFooterSection__ArgProps,
      internalVariantPropNames: PlasmicFooterSection__VariantProps,
    })

    const { dataFetches } = props
    return PlasmicFooterSection__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicFooterSection"
  } else {
    func.displayName = `PlasmicFooterSection.${nodeName}`
  }
  return func
}

export const PlasmicFooterSection = Object.assign(
  // Top-level PlasmicFooterSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    logo: makeNodeComponent("logo"),
    // Metadata about props expected for PlasmicFooterSection
    internalVariantProps: PlasmicFooterSection__VariantProps,
    internalArgProps: PlasmicFooterSection__ArgProps,
  }
)

export default PlasmicFooterSection
/* prettier-ignore-end */
