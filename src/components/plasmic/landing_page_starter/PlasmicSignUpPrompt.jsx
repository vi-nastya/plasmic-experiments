// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vVjGbvUwkV23CBGoevYCby
// Component: 9pewbef40anp
import * as React from "react"
import * as p from "@plasmicapp/react-web"
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web"
import Button from "../../Button" // plasmic-import: 8MU0F2Dvq-uK/component
import Divider from "../../Divider" // plasmic-import: PowlnT_eP0kA/component
import TextInput from "../../TextInput" // plasmic-import: Gq734SRnqdzQ/component
import "@plasmicapp/react-web/lib/plasmic.css"
import * as projectcss from "./plasmic_landing_page_starter.module.css" // plasmic-import: vVjGbvUwkV23CBGoevYCby/projectcss
import * as sty from "./PlasmicSignUpPrompt.module.css" // plasmic-import: 9pewbef40anp/css
import GoogleIcon from "./icons/PlasmicIcon__Google" // plasmic-import: Z69BLMXyWDMd/icon
import WandIcon from "./icons/PlasmicIcon__Wand" // plasmic-import: BbTco0_bYknu/icon

export const PlasmicSignUpPrompt__VariantProps = new Array()

export const PlasmicSignUpPrompt__ArgProps = new Array()

function PlasmicSignUpPrompt__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root)}
    >
      <div className={classNames(projectcss.all, sty.freeBox__slVrp)}>
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___5CrKj)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__eoY1D
            )}
          >
            {"Sign up with"}
          </div>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__cyXud)}
          >
            <Button
              className={classNames("__wab_instance", sty.button___4UFWf)}
              outline={"outline"}
              showStartIcon={"showStartIcon"}
            >
              {"Apple"}
            </Button>

            <Button
              className={classNames("__wab_instance", sty.button__g8LR)}
              outline={"outline"}
              showStartIcon={"showStartIcon"}
              startIcon={
                <GoogleIcon
                  className={classNames(projectcss.all, sty.svg__rzh4L)}
                  role={"img"}
                />
              }
            >
              {"Google"}
            </Button>
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__aHxMw)}
          >
            <Divider
              className={classNames("__wab_instance", sty.divider__mk5CO)}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___3L4Fb
              )}
            >
              {"Or"}
            </div>

            <Divider
              className={classNames("__wab_instance", sty.divider__xfPwu)}
            />
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__rxZ0T)}
          >
            <TextInput
              className={classNames("__wab_instance", sty.textInput__s8QLz)}
              placeholder={"Full Name"}
            />

            <TextInput
              className={classNames("__wab_instance", sty.textInput__p8VsA)}
              placeholder={"Email"}
            />

            <TextInput
              className={classNames("__wab_instance", sty.textInput__uLd9H)}
              placeholder={"Password"}
            />
          </p.Stack>

          <Button
            className={classNames("__wab_instance", sty.button__ifBJf)}
            color={"indigo"}
            endIcon={
              <WandIcon
                className={classNames(projectcss.all, sty.svg__bbT9M)}
                role={"img"}
              />
            }
          >
            {"Start your account"}
          </Button>
        </p.Stack>

        <Divider className={classNames("__wab_instance", sty.divider__cedTq)} />

        <div className={classNames(projectcss.all, sty.freeBox__nVTb4)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__qlUuv
            )}
          >
            {
              "A cras sagittis odio vestibulum pulvinar a eget hendrerit id vestibulum a leo sociosqu dictumst dictumst natoque magnis parturient."
            }
          </div>
        </div>
      </div>
    </p.Stack>
  )
}

const PlasmicDescendants = {
  root: ["root"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSignUpPrompt__ArgProps,
      internalVariantPropNames: PlasmicSignUpPrompt__VariantProps,
    })

    const { dataFetches } = props
    return PlasmicSignUpPrompt__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicSignUpPrompt"
  } else {
    func.displayName = `PlasmicSignUpPrompt.${nodeName}`
  }
  return func
}

export const PlasmicSignUpPrompt = Object.assign(
  // Top-level PlasmicSignUpPrompt renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicSignUpPrompt
    internalVariantProps: PlasmicSignUpPrompt__VariantProps,
    internalArgProps: PlasmicSignUpPrompt__ArgProps,
  }
)

export default PlasmicSignUpPrompt
/* prettier-ignore-end */
