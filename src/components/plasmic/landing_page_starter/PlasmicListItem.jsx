// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vVjGbvUwkV23CBGoevYCby
// Component: Juhblat5_sI2
import * as React from "react"
import * as p from "@plasmicapp/react-web"
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web"
import "@plasmicapp/react-web/lib/plasmic.css"
import * as projectcss from "./plasmic_landing_page_starter.module.css" // plasmic-import: vVjGbvUwkV23CBGoevYCby/projectcss
import * as sty from "./PlasmicListItem.module.css" // plasmic-import: Juhblat5_sI2/css
import CheckCircleIcon from "./icons/PlasmicIcon__CheckCircle" // plasmic-import: fwKg7tn4POxD/icon

export const PlasmicListItem__VariantProps = new Array(
  "bottomBorder",
  "leftCheck"
)

export const PlasmicListItem__ArgProps = new Array("children", "icon")

function PlasmicListItem__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root, {
        [sty.root__bottomBorder_dark]: hasVariant(
          variants,
          "bottomBorder",
          "dark"
        ),

        [sty.root__bottomBorder_light]: hasVariant(
          variants,
          "bottomBorder",
          "light"
        ),

        [sty.root__leftCheck]: hasVariant(variants, "leftCheck", "leftCheck"),
      })}
    >
      {p.renderPlasmicSlot({
        defaultContents: "Something amazing",
        value: args.children,
        className: classNames(sty.slotTargetChildren),
      })}

      {p.renderPlasmicSlot({
        defaultContents: (
          <CheckCircleIcon
            className={classNames(projectcss.all, sty.svg__wfxur)}
            role={"img"}
          />
        ),

        value: args.icon,
      })}
    </p.Stack>
  )
}

const PlasmicDescendants = {
  root: ["root"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicListItem__ArgProps,
      internalVariantPropNames: PlasmicListItem__VariantProps,
    })

    const { dataFetches } = props
    return PlasmicListItem__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicListItem"
  } else {
    func.displayName = `PlasmicListItem.${nodeName}`
  }
  return func
}

export const PlasmicListItem = Object.assign(
  // Top-level PlasmicListItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicListItem
    internalVariantProps: PlasmicListItem__VariantProps,
    internalArgProps: PlasmicListItem__ArgProps,
  }
)

export default PlasmicListItem
/* prettier-ignore-end */
