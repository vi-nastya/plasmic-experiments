// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vVjGbvUwkV23CBGoevYCby
// Component: d-vfE4bL9h6g
import * as React from "react"
import * as p from "@plasmicapp/react-web"
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web"
import "@plasmicapp/react-web/lib/plasmic.css"
import * as projectcss from "./plasmic_landing_page_starter.module.css" // plasmic-import: vVjGbvUwkV23CBGoevYCby/projectcss
import * as sty from "./PlasmicSection.module.css" // plasmic-import: d-vfE4bL9h6g/css

export const PlasmicSection__VariantProps = new Array("background", "size")

export const PlasmicSection__ArgProps = new Array("children")

function PlasmicSection__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root, {
        [sty.root__background_dark]: hasVariant(variants, "background", "dark"),
        [sty.root__background_gray]: hasVariant(variants, "background", "gray"),
        [sty.root__size_fullContentWidth]: hasVariant(
          variants,
          "size",
          "fullContentWidth"
        ),
      })}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBox__size_fullContentWidth]: hasVariant(
            variants,
            "size",
            "fullContentWidth"
          ),
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: null,
          value: args.children,
        })}
      </div>
    </div>
  )
}

const PlasmicDescendants = {
  root: ["root", "freeBox"],
  freeBox: ["freeBox"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSection__ArgProps,
      internalVariantPropNames: PlasmicSection__VariantProps,
    })

    const { dataFetches } = props
    return PlasmicSection__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicSection"
  } else {
    func.displayName = `PlasmicSection.${nodeName}`
  }
  return func
}

export const PlasmicSection = Object.assign(
  // Top-level PlasmicSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    // Metadata about props expected for PlasmicSection
    internalVariantProps: PlasmicSection__VariantProps,
    internalArgProps: PlasmicSection__ArgProps,
  }
)

export default PlasmicSection
/* prettier-ignore-end */
